
{
  "getTweets": "const followedUserIds = await getManyFollows(d, (follow) => follow.followerId.equals(user._id)).collect().map(follow => follow.followedId); const tweets = await getManyTweets(d, (tweet) => followedUserIds.includes(tweet.userId)).order(\"desc\").take(args.limit ?? 50); return tweets;",
  "getUserProfile": "const profile = await getOneUsers(d, args.userId); return profile;",
  "getUserTweets": "const tweets = await getManyTweets(d, (tweet) => tweet.userId.equals(args.userId)).order(\"desc\").take(args.limit ?? 50); return tweets;",
  "postTweet": "const tweetId = await createOneTweets(d, {userId: user._id, text: args.text}); return tweetId;", 
  "followUser": "const existingFollow = await getManyFollows(d, (follow) => follow.followerId.equals(user._id) && follow.followedId.equals(args.userId)).first(); if (existingFollow) {return existingFollow._id;} const followId = await createOneFollows(d, {followerId: user._id, followedId: args.userId}); return followId;",
  "unfollowUser": "const existingFollow = await getManyFollows(d, (follow) => follow.followerId.equals(user._id) && follow.followedId.equals(args.userId)).first(); if (!existingFollow) {return false;} await deleteOneFollows(d, existingFollow._id); return true;"
}
