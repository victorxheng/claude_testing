
{
  "actions_description": "The backend actions will handle creating and updating user profiles, retrieving user profiles for the match page, creating and managing match requests between users.",
  "query_actions_required": "Query actions are needed to retrieve a user's own profile, get a list of available user profiles for the match page, and get a user's incoming and outgoing match requests.",
  "query_actions": [
    {
      "name": "getUserProfile",
      "where_used": "Edit Profile page",
      "docs": "Retrieves the profile of the currently logged in user.",
      "requires_auth": true,
      "arguments": [],
      "returns": "The user's profile data",
      "return_type": "User object",
      "workflow_steps": [
        {
          "step": "Get the currently logged in user's ID from Clerk auth"
        },
        {
          "step": "Query the 'users' table for the document matching the user ID"
        },
        {
          "step": "Return the user document data"
        }
      ]
    },
    {
      "name": "getAvailableProfiles",
      "where_used": "Match page",
      "docs": "Retrieves a list of user profiles that are available for matching, excluding the current user.",
      "requires_auth": true,
      "arguments": [],
      "returns": "List of available user profiles",
      "return_type": "Array of User objects",
      "workflow_steps": [
        {
          "step": "Get the currently logged in user's ID from Clerk auth"
        },
        {
          "step": "Query the 'users' table for documents where isAvailable is true and the ID does not match the current user"
        },
        {
          "step": "Return the matching user documents"
        }
      ]
    },
    {
      "name": "getIncomingMatches",
      "where_used": "Match Requests page",
      "docs": "Retrieves a list of incoming match requests for the current user.",
      "requires_auth": true,
      "arguments": [],
      "returns": "List of incoming match requests",
      "return_type": "Array of Match objects",
      "workflow_steps": [
        {
          "step": "Get the currently logged in user's ID from Clerk auth"
        },
        {
          "step": "Query the 'matches' table for documents where the 'to' field matches the current user ID"
        },
        {
          "step": "Return the matching match documents"
        }
      ]
    },
    {
      "name": "getOutgoingMatches",
      "where_used": "Match Requests page",
      "docs": "Retrieves a list of outgoing match requests sent by the current user.",
      "requires_auth": true,
      "arguments": [],
      "returns": "List of outgoing match requests",
      "return_type": "Array of Match objects", 
      "workflow_steps": [
        {
          "step": "Get the currently logged in user's ID from Clerk auth"
        },
        {
          "step": "Query the 'matches' table for documents where the 'from' field matches the current user ID"  
        },
        {
          "step": "Return the matching match documents"
        }
      ]
    }
  ],
  "mutation_actions_required": "Mutation actions are needed for creating and updating the user's profile, sending a new match request, and accepting or rejecting incoming match requests.",
  "mutation_actions": [
    {
      "name": "createUserProfile",
      "where_used": "Profile Creation page",
      "docs": "Creates a new user profile document.",
      "requires_auth": true,
      "arguments": [
        {
          "name": "name",
          "docs": "The user's full name",
          "type": "v.string()"
        },
        {
          "name": "linkedin",
          "docs": "URL to the user's LinkedIn profile",
          "type": "v.string()"
        },
        {
          "name": "description", 
          "docs": "Brief user description",
          "type": "v.string()"
        },
        {
          "name": "isTechnical",
          "docs": "Whether the user is a technical cofounder",
          "type": "v.boolean()" 
        }
      ],
      "returns": "The ID of the new user document",
      "return_type": "ID",
      "workflow_steps": [
        {
          "step": "Get the currently logged in user's email from Clerk auth"
        },
        {
          "step": "Create a new document in the 'users' table with the email and supplied profile fields, defaulting isAvailable to true"
        },
        {
          "step": "Return the ID of the newly created document"
        }
      ]
    },
    {
      "name": "updateUserProfile",
      "where_used": "Edit Profile page",
      "docs": "Updates the current user's profile document.",
      "requires_auth": true,
      "arguments": [
        {
          "name": "name",
          "docs": "The user's full name",
          "type": "v.string()"
        },
        {
          "name": "linkedin",
          "docs": "URL to the user's LinkedIn profile", 
          "type": "v.string()"
        },
        {
          "name": "description",
          "docs": "Brief user description",
          "type": "v.string()"
        },
        {
          "name": "isTechnical",
          "docs": "Whether the user is a technical cofounder",
          "type": "v.boolean()"
        },
        {
          "name": "isAvailable",
          "docs": "Whether the user is available for matching",
          "type": "v.boolean()"
        }
      ],
      "returns": "The updated user document",
      "return_type": "User object",
      "workflow_steps": [
        {
          "step": "Get the currently logged in user's ID from Clerk auth"
        },
        {
          "step": "Update the user document matching the ID with the supplied profile fields"
        },
        {
          "step": "Return the updated user document"
        }
      ]
    },
    {
      "name": "sendMatchRequest",
      "where_used": "Match page",
      "docs": "Sends a new match request from the current user to another user.",
      "requires_auth": true,
      "arguments": [
        {
          "name": "toUserId",
          "docs": "ID of the user to send the request to",
          "type": "v.id(\"users\")"
        },
        {
          "name": "message",
          "docs": "Message to include with the match request",
          "type": "v.string()"
        }
      ],
      "returns": "The ID of the new match request document",
      "return_type": "ID",
      "workflow_steps": [
        {
          "step": "Get the currently logged in user's ID from Clerk auth"  
        },
        {
          "step": "Create a new document in the 'matches' table with the from set to current user ID, to set to supplied user ID, status set to 'pending', and the request message"
        },
        {
          "step": "Return the ID of the newly created match document"
        }
      ]
    },
    {
      "name": "acceptMatchRequest",
      "where_used": "Match Requests page",
      "docs": "Accepts an incoming match request.",
      "requires_auth": true,
      "arguments": [
        {
          "name": "matchId",
          "docs": "ID of the match request document",
          "type": "v.id(\"matches\")"
        },
        {
          "name": "message",
          "docs": "Optional message when accepting the request",
          "type": "v.optional(v.string())"
        }
      ],
      "returns": "The updated match document",
      "return_type": "Match object",
      "workflow_steps": [
        {
          "step": "Get the match document by ID"
        },
        {
          "step": "Verify the logged in user ID matches the 'to' field of the match"
        },
        {
          "step": "Update the match document, setting status to 'accepted' and the accept message"
        },
        {
          "step": "Return the updated match document"
        }
      ]
    },
    {
      "name": "rejectMatchRequest",
      "where_used": "Match Requests page", 
      "docs": "Rejects an incoming match request.",
      "requires_auth": true,
      "arguments": [
        {
          "name": "matchId",
          "docs": "ID of the match request document",
          "type": "v.id(\"matches\")"
        }
      ],
      "returns": "The updated match document",
      "return_type": "Match object",
      "workflow_steps": [
        {
          "step": "Get the match document by ID"
        },
        {
          "step": "Verify the logged in user ID matches the 'to' field of the match"  
        },
        {
          "step": "Update the match document, setting status to 'rejected'"
        },
        {
          "step": "Return the updated match document"
        }
      ]
    }
  ],
  "actions_required": "No additional actions are required for this application beyond queries and mutations.",
  "actions": []
}
