
{
  "actions_description": "The application will need actions to fetch tweets for a user's timeline, post new tweets, fetch user profiles, and manage user follows.",
  "query_actions_required": "Query actions will be needed to fetch tweets and user profiles.",
  "query_actions": [
    {
      "name": "getTweets",
      "where_used": "Used to fetch tweets for a user's timeline",
      "docs": "Retrieves tweets from users that the authenticated user follows",
      "requires_auth": true,
      "arguments": [
        {
          "name": "limit",
          "docs": "Maximum number of tweets to return",
          "type": "v.optional(v.number())"
        }
      ],
      "returns": "An array of tweet objects",
      "return_type": "v.array(v.object({userId: v.id(\"users\"), text: v.string()}))",
      "workflow_steps": [
        {
          "step": "Fetch the IDs of users that the current user follows from the follows table"
        },
        {
          "step": "Query the tweets table for tweets with a userId matching the followed user IDs"
        },
        {
          "step": "Sort the tweets by descending timestamp and return the requested number"
        }
      ]
    },
    {
      "name": "getUserProfile",
      "where_used": "Used to fetch profile details when viewing a user's page",
      "docs": "Retrieves profile details for a given user ID",
      "requires_auth": false,
      "arguments": [
        {
          "name": "userId",
          "docs": "ID of the user to fetch profile for",
          "type": "v.id(\"users\")"
        }
      ],
      "returns": "The requested user profile object",
      "return_type": "v.object({username: v.string(), email: v.string(), name: v.string(), bio: v.string()})",
      "workflow_steps": [
        {
          "step": "Query the users table for the user with the provided userId"
        }
      ]
    },
    {
      "name": "getUserTweets",
      "where_used": "Used to fetch a user's tweets when viewing their profile",
      "docs": "Retrieves tweets posted by a given user",
      "requires_auth": false,
      "arguments": [
        {
          "name": "userId",
          "docs": "ID of the user to fetch tweets for",
          "type": "v.id(\"users\")"
        },
        {
          "name": "limit",
          "docs": "Maximum number of tweets to return",
          "type": "v.optional(v.number())"
        }
      ],
      "returns": "An array of the user's tweet objects",
      "return_type": "v.array(v.object({userId: v.id(\"users\"), text: v.string()}))",
      "workflow_steps": [
        {
          "step": "Query the tweets table for tweets with the provided userId"
        },
        {
          "step": "Sort the tweets by descending timestamp and return the requested number"  
        }
      ]
    }
  ],
  "mutation_actions_required": "Mutation actions will be needed to post tweets and manage follows.",
  "mutation_actions": [
    {
      "name": "postTweet",
      "where_used": "Used to post a new tweet",
      "docs": "Posts a new tweet for the authenticated user",
      "requires_auth": true,
      "arguments": [
        {
          "name": "text",
          "docs": "Text content of the tweet to post",
          "type": "v.string()"
        }
      ],
      "returns": "The ID of the newly created tweet",
      "return_type": "v.id(\"tweets\")",
      "workflow_steps": [
        {
          "step": "Insert a new tweet into the tweets table with the authenticated user's ID and provided text"
        }
      ]
    },
    {
      "name": "followUser",
      "where_used": "Used to follow another user",
      "docs": "Establishes a follow relationship from the authenticated user to another user",
      "requires_auth": true,
      "arguments": [
        {
          "name": "userId",
          "docs": "ID of the user to follow",
          "type": "v.id(\"users\")"  
        }
      ],
      "returns": "The ID of the newly created follow relationship",
      "return_type": "v.id(\"follows\")",
      "workflow_steps": [
        {
          "step": "Check that the authenticated user is not already following the target user"
        },
        {
          "step": "Insert a new follow record into the follows table with the authenticated user as the follower and target user as the followed"
        }
      ]
    },
    {
      "name": "unfollowUser",
      "where_used": "Used to unfollow a previously followed user",  
      "docs": "Removes a follow relationship from the authenticated user to another user",
      "requires_auth": true,
      "arguments": [
        {
          "name": "userId",
          "docs": "ID of the user to unfollow",
          "type": "v.id(\"users\")"
        }
      ],
      "returns": "True if the unfollow was successful, false if there was no existing follow relationship",
      "return_type": "v.boolean()",
      "workflow_steps": [
        {
          "step": "Check if a follow record exists with the authenticated user as follower and target user as followed"
        },
        {
          "step": "If found, delete the follow record, otherwise return false"
        }
      ]
    }
  ],
  "actions_required": "No additional actions are required for this application.",
  "actions": []
}
