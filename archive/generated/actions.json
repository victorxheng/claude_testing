{
    "actions_description": "The actions for this Twitter-like application will involve creating, retrieving and searching for users, posting and retrieving tweets, and managing user follow relationships.",
  
    "query_actions_required": "Query actions are needed to get user profiles, retrieve tweets for a user's timeline, and search for users and tweets.",
    
    "query_actions": [
      {
        "name": "getUserProfile",
        "where_used": "Used in user profile pages to retrieve user details.",
        "docs": "Retrieves the profile details for a given user ID.",
        "requires_auth": false,
        "arguments": [
          {
            "name": "userId",
            "docs": "The ID of the user to retrieve the profile for.",
            "type": "v.id(\"users\")"
          }
        ],
        "returns": "The user profile object containing username, email, name and bio fields.",
        "return_type": "User object",
        "workflow_steps": [
          {
            "step": "Retrieve the user document with the given userId from the users table."
          }
        ]
      },
      {
        "name": "getTimelineTweets",
        "where_used": "Used to populate the timeline view for a logged in user.",
        "docs": "Retrieves tweet objects for the given user's timeline based on who they follow.",
        "requires_auth": true,
        "arguments": [
          {
            "name": "userId",
            "docs": "The ID of the user to retrieve the timeline tweets for.",
            "type": "v.id(\"users\")"
          }
        ],
        "returns": "An array of tweet objects for the user's timeline containing each tweet's details.",
        "return_type": "Array of tweet objects",
        "workflow_steps": [
          {
            "step": "Retrieve IDs of users that the given user is following from the follows table."
          },
          {
            "step": "Retrieve tweet IDs posted by the followed users from the tweets table."
          },
          {
            "step": "Sort the tweets by timestamp in descending order."
          }
        ]
      },
      {
        "name": "searchUsers",
        "where_used": "Used for the user search feature.",
        "docs": "Searches for users based on a search query string.",
        "requires_auth": false,
        "arguments": [
          {
            "name": "query",
            "docs": "The search query string to match against usernames and names.",
            "type": "v.string()"
          }
        ],
        "returns": "An array of user objects that match the search query.",
        "return_type": "Array of user objects",
        "workflow_steps": [
          {
            "step": "Perform a text search on the username and name fields in the users table using the query string."
          },
          {
            "step": "Return the matching user documents."
          }
        ]
      },
      {
        "name": "searchTweets",
        "where_used": "Used for the tweet search feature.",
        "docs": "Searches for tweets based on a search query string.",
        "requires_auth": false,
        "arguments": [
          {
            "name": "query",
            "docs": "The search query string to match against tweet text.",
            "type": "v.string()"
          }
        ],
        "returns": "An array of tweet objects that match the search query.",
        "return_type": "Array of tweet objects",
        "workflow_steps": [
          {
            "step": "Perform a text search on the text field in the tweets table using the query string."
          },
          {
            "step": "Return the matching tweet documents."
          }
        ]
      }
    ],
  
    "mutation_actions_required": "Mutation actions are needed for user signup, posting tweets, and following/unfollowing users.",
    
    "mutation_actions": [
      {
        "name": "postTweet",
        "where_used": "Used when a user posts a new tweet.",
        "docs": "Creates a new tweet posted by the given user.",
        "requires_auth": true,
        "arguments": [
          {
            "name": "userId",
            "docs": "The ID of the user posting the tweet.",
            "type": "v.id(\"users\")"
          },
          {
            "name": "text",
            "docs": "The text content of the new tweet.",
            "type": "v.string()"
          }
        ],
        "returns": "The newly created tweet object.",
        "return_type": "Tweet object",
        "workflow_steps": [
          {
            "step": "Create a new tweet document in the tweets table with the given userId and text."
          }
        ]
      },
      {
        "name": "followUser",
        "where_used": "Used when a user follows another user.",
        "docs": "Creates a new follow relationship between two users.",
        "requires_auth": true,
        "arguments": [
          {
            "name": "followerId",
            "docs": "The ID of the user doing the following.",
            "type": "v.id(\"users\")"
          },
          {
            "name": "followedId",
            "docs": "The ID of the user being followed.",
            "type": "v.id(\"users\")"
          }
        ],
        "returns": "The newly created follow relationship object.",
        "return_type": "Follow object",
        "workflow_steps": [
          {
            "step": "Create a new follow document in the follows table with the given followerId and followedId."
          }
        ]
      },
      {
        "name": "unfollowUser",
        "where_used": "Used when a user unfollows another user.",
        "docs": "Removes an existing follow relationship between two users.",
        "requires_auth": true, 
        "arguments": [
          {
            "name": "followerId",
            "docs": "The ID of the user doing the unfollowing.",
            "type": "v.id(\"users\")"
          },
          {
            "name": "followedId",
            "docs": "The ID of the user being unfollowed.",
            "type": "v.id(\"users\")"  
          }
        ],
        "returns": "Null on successful unfollow.",
        "return_type": "Null",
        "workflow_steps": [
          {
            "step": "Delete the follow document from the follows table matching the given followerId and followedId."
          }
        ]
      }
    ],
    
    "actions_required": "No additional standalone actions are required for this application.",
    "actions": []
  }